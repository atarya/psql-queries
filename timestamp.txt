Produce a timestamp for 1 a.m. on the 31st of August 2012.
  SELECT TIMESTAMP '2012-08-31 01:00:00';          

Find the result of subtracting the timestamp '2012-07-30 01:00:00' from the timestamp '2012-08-31 01:00:00'
  SELECT TIMESTAMP '2012-08-31 01:00:00' - TIMESTAMP '2012-07-30 01:00:00' AS INTERVAL;          

Produce a list of all the dates in October 2012. They can be output as a timestamp (with time set to midnight) or a date.
  SELECT generate_series(TIMESTAMP '2012-10-01', TIMESTAMP '2012-10-31', INTERVAL '1 day') AS ts;          

Get the day of the month from the timestamp '2012-08-31' as an integer.
  SELECT EXTRACT(DAY FROM TIMESTAMP '2012-08-31');          

Work out the number of seconds between the timestamps '2012-08-31 01:00:00' and '2012-09-02 00:00:00'
  SELECT EXTRACT(EPOCH FROM (timestamp '2012-09-02 00:00:00' - '2012-08-31 01:00:00'));          

For each month of the year in 2012, output the number of days in that month. Format the output as an integer column containing the month of the year, and a second column containing an interval data type.
  SELECT 	EXTRACT(MONTH FROM cal.month) as month,
	(cal.month + INTERVAL '1 MONTH') - cal.month AS length
	FROM
	(
		SELECT GENERATE_SERIES(TIMESTAMP '2012-01-01', TIMESTAMP '2012-12-01', INTERVAL '1 month') as month
	) CAL
  ORDER BY month; 
  
For any given timestamp, work out the number of days remaining in the month. The current day should count as a whole day, regardless of the time. Use '2012-02-11 01:00:00' as an example timestamp for the purposes of making the answer. Format the output as a single interval value.
  SELECT (DATE_TRUNC('MONTH',ts.testts) + INTERVAL '1 MONTH') 
		- DATE_TRUNC('DAY', ts.testts) AS remaining
	FROM (SELECT TIMESTAMP '2012-02-11 01:00:00' AS testts) TS
  
Return a list of the start and end time of the last 10 bookings (ordered by the time at which they end, followed by the time at which they start) in the system.
  SELECT starttime, starttime + slots*(INTERVAL '30 MINUTES') endtime
	FROM cd.bookings
	ORDER BY endtime DESC, starttime DESC
	LIMIT 10       
  
Return a count of bookings for each month, sorted by month
  SELECT DATE_TRUNC('MONTH', starttime) AS month, COUNT(*)
	FROM cd.bookings
	GROUP BY month
	ORDER BY month          
  
Work out the utilisation percentage for each facility by month, sorted by name and month, rounded to 1 decimal place. Opening time is 8am, closing time is 8.30pm. You can treat every month as a full month, regardless of if there were some dates the club was not open.
  SELECT name, month, 
	ROUND((100*slots)/
		CAST(
			25*(CAST((MONTH + INTERVAL '1 MONTH') AS date)
			- CAST (MONTH as DATE)) AS NUMERIC),1) AS utilisation
	FROM  (
		SELECT facs.name AS name, DATE_TRUNC('MONTH', starttime) AS month, SUM(slots) AS slots
			FROM cd.bookings bks
			INNER JOIN cd.facilities facs
				ON bks.facid = facs.facid
			GROUP BY facs.facid, month
	) AS inn
  ORDER BY name, month 
  
