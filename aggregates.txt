For our first foray into aggregates, we're going to stick to something simple. We want to know how many facilities exist - simply produce a total count.
        
        select count(*) from cd.facilities;


Produce a count of the number of facilities that have a cost to guests of 10 or more.
        
        select count(*) from cd.facilities where guestcost >= 10;          


Produce a count of the number of recommendations each member has made. Order by member ID.
        
        select recommendedby, count(*) 
            from cd.members
            where recommendedby is not null
            group by recommendedby
          order by recommendedby; 
          
          
Produce a list of the total number of slots booked per facility. For now, just produce an output table consisting of facility id and slots, sorted by facility id.
        
        select facid, sum(slots) as "Total Slots"
          from cd.bookings
          group by facid
        order by facid;  
        
        
Produce a list of the total number of slots booked per facility in the month of September 2012. Produce an output table consisting of facility id and slots, sorted by the number of slots.
        
        select facid, sum(slots) as "Total Slots"
            from cd.bookings
            where
              starttime >= '2012-09-01'
              and starttime < '2012-10-01'
            group by facid
          order by sum(slots);   
          
          
Produce a list of the total number of slots booked per facility per month in the year of 2012. Produce an output table consisting of facility id and slots, sorted by the id and month.
        
        select facid, extract(month from starttime) as month, sum(slots) as "Total Slots"
            from cd.bookings
            where extract(year from starttime) = 2012
            group by facid, month
          order by facid, month; 
          
          
Find the total number of members (including guests) who have made at least one booking.
        
        select count(distinct memid) from cd.bookings          


Produce a list of facilities with more than 1000 slots booked. Produce an output table consisting of facility id and slots, sorted by facility id.
        
        select facid, sum(slots) as "Total Slots"
        from cd.bookings
        group by facid
        having sum(slots) > 1000
        order by facid    
        
        
Produce a list of facilities along with their total revenue. The output table should consist of facility name and revenue, sorted by revenue. Remember that there's a different cost for guests and members!
        
        select facs.name, sum(slots * case
              when memid = 0 then facs.guestcost
              else facs.membercost
            end) as revenue
          from cd.bookings bks
          inner join cd.facilities facs
            on bks.facid = facs.facid
          group by facs.name
        order by revenue;      
        

Produce a list of facilities with a total revenue less than 1000. Produce an output table consisting of facility name and revenue, sorted by revenue. Remember that there's a different cost for guests and members!
        
        select name, revenue from (
          select facs.name, sum(case 
                when memid = 0 then slots * facs.guestcost
                else slots * membercost
              end) as revenue
            from cd.bookings bks
            inner join cd.facilities facs
              on bks.facid = facs.facid
            group by facs.name
          ) as agg where revenue < 1000
        order by revenue;          
        
        
Output the facility id that has the highest number of slots booked. For bonus points, try a version without a LIMIT clause. This version will probably look messy!
        
        select facid, sum(slots) as "Total Slots"
          from cd.bookings
          group by facid
        order by sum(slots) desc
        LIMIT 1;          
        
        
Produce a list of the total number of slots booked per facility per month in the year of 2012. In this version, include output rows containing totals for all months per facility, and a total for all months for all facilities. The output table should consist of facility id, month and slots, sorted by the id and month. When calculating the aggregated values for all months and all facids, return null values in the month and facid columns.
        
        select facid, extract(month from starttime) as month, sum(slots) as slots
            from cd.bookings
            where
              starttime >= '2012-01-01'
              and starttime < '2013-01-01'
            group by rollup(facid, month)
          order by facid, month;
          
          
Produce a list of the total number of hours booked per facility, remembering that a slot lasts half an hour. The output table should consist of the facility id, name, and hours booked, sorted by facility id. Try formatting the hours to two decimal places.
        
        select facs.facid, facs.name,
          trim(to_char(sum(bks.slots)/2.0, '9999999999999999D99')) as "Total Hours"

          from cd.bookings bks
          inner join cd.facilities facs
            on facs.facid = bks.facid
          group by facs.facid, facs.name
        order by facs.facid;      
        
Produce a list of each member name, id, and their first booking after September 1st 2012. Order by member ID.
        
        select mems.surname, mems.firstname, mems.memid, min(bks.starttime) as starttime
            from cd.bookings bks
            inner join cd.members mems on
              mems.memid = bks.memid
            where starttime >= '2012-09-01'
            group by mems.surname, mems.firstname, mems.memid
          order by mems.memid;    
          
          
Produce a list of member names, with each row containing the total member count. Order by join date, and include guest members.
        
        select count(*) over(), firstname, surname
            from cd.members
          order by joindate          
          
          
Produce a monotonically increasing numbered list of members (including guests), ordered by their date of joining. Remember that member IDs are not guaranteed to be sequential.
        
        select row_number() over(order by joindate), firstname, surname
            from cd.members
          order by joindate 
          
          
Output the facility id that has the highest number of slots booked. Ensure that in the event of a tie, all tieing results get output.
        
        select facid, total from (
            select facid, sum(slots) total, rank() over (order by sum(slots) desc) rank
                    from cd.bookings
              group by facid
            ) as ranked
            where rank = 1    
            
            
Produce a list of members (including guests), along with the number of hours they've booked in facilities, rounded to the nearest ten hours. Rank them by this rounded figure, producing output of first name, surname, rounded hours, rank. Sort by rank, surname, and first name.
        
        select firstname, surname,
          ((sum(bks.slots)+10)/20)*10 as hours,
          rank() over (order by ((sum(bks.slots)+10)/20)*10 desc) as rank

          from cd.bookings bks
          inner join cd.members mems
            on bks.memid = mems.memid
          group by mems.memid
        order by rank, surname, firstname;  
        
        
Produce a list of the top three revenue generating facilities (including ties). Output facility name and rank, sorted by rank and facility name.
        
        select name, rank from (
          select facs.name as name, rank() over (order by sum(case
                when memid = 0 then slots * facs.guestcost
                else slots * membercost
              end) desc) as rank
            from cd.bookings bks
            inner join cd.facilities facs
              on bks.facid = facs.facid
            group by facs.name
          ) as subq
          where rank <= 3
        order by rank;          
        
        
Classify facilities into equally sized groups of high, average, and low based on their revenue. Order by classification and facility name.
        
        select name, case when class=1 then 'high'
            when class=2 then 'average'
            else 'low'
            end revenue
          from (
            select facs.name as name, ntile(3) over (order by sum(case
                when memid = 0 then slots * facs.guestcost
                else slots * membercost
              end) desc) as class
            from cd.bookings bks
            inner join cd.facilities facs
              on bks.facid = facs.facid
            group by facs.name
          ) as subq
        order by class, name;     
        
        
Based on the 3 complete months of data so far, calculate the amount of time each facility will take to repay its cost of ownership. Remember to take into account ongoing monthly maintenance. Output facility name and payback time in months, order by facility name. Don't worry about differences in month lengths, we're only looking for a rough value here!
        
        select 	facs.name as name,
          facs.initialoutlay/((sum(case
              when memid = 0 then slots * facs.guestcost
              else slots * membercost
            end)/3) - facs.monthlymaintenance) as months
          from cd.bookings bks
          inner join cd.facilities facs
            on bks.facid = facs.facid
          group by facs.facid
        order by name;        
        
        
For each day in August 2012, calculate a rolling average of total revenue over the previous 15 days. Output should contain date and revenue columns, sorted by the date. Remember to account for the possibility of a day having zero revenue. This one's a bit tough, so don't be afraid to check out the hint!
        
        select 	dategen.date,
          (
            -- correlated subquery that, for each day fed into it,
            -- finds the average revenue for the last 15 days
            select sum(case
              when memid = 0 then slots * facs.guestcost
              else slots * membercost
            end) as rev

            from cd.bookings bks
            inner join cd.facilities facs
              on bks.facid = facs.facid
            where bks.starttime > dategen.date - interval '14 days'
              and bks.starttime < dategen.date + interval '1 day'
          )/15 as revenue
          from
          (
            -- generates a list of days in august
            select 	cast(generate_series(timestamp '2012-08-01',
              '2012-08-31','1 day') as date) as date
          )  as dategen
        order by dategen.date; 
        
        
